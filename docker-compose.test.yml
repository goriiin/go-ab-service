services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres-test
    restart: on-failure
    volumes:
      - ./init/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=ab_platform_test
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ab_platform_test"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - ab_net_test

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka-test
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CREATE_TOPICS=ab_deltas:1:1,ab_snapshots_meta:1:1,ab_assignment_events:1:1
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - ab_net_test

  minio:
    image: minio/minio:latest
    container_name: minio-test
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 2s
      retries: 5
    networks:
      - ab_net_test

  mc:
    image: minio/mc
    container_name: mc-test
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb local/ab-snapshots --ignore-existing;
      /usr/bin/mc policy set download local/ab-snapshots;
      echo '[]' > /tmp/initial_snapshot.json;
      /usr/bin/mc cp /tmp/initial_snapshot.json local/ab-snapshots/snapshot-initial.json;
      echo 'Initial empty snapshot created.';
      "
    networks:
      - ab_net_test

  central-api:
    build:
      context: .
      dockerfile: cmd/central-api/Dockerfile
    container_name: central-api-test
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_NAME=ab_platform_test
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:8080/health"]
      interval: 5s
      timeout: 2s
      retries: 10
    networks:
      - ab_net_test

  outbox-worker:
    build:
      context: .
      dockerfile: cmd/outbox-worker/Dockerfile
    container_name: outbox-worker-test
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - DB_NAME=ab_platform_test
    networks:
      - ab_net_test

  snapshot-generator:
    build:
      context: .
      dockerfile: cmd/snapshot-generator/Dockerfile
    container_name: snapshot-generator-test
    depends_on:
      postgres:
        condition: service_healthy
      mc:
        condition: service_completed_successfully
    environment:
      - DB_NAME=ab_platform_test
    networks:
      - ab_net_test

  example-sort-app:
    build:
      context: .
      dockerfile: cmd/example-sort-app/Dockerfile
    container_name: example-sort-app-test
    depends_on:
      mc:
        condition: service_completed_successfully
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8081/sort"]
      interval: 5s
      timeout: 2s
      retries: 10
    networks:
      - ab_net_test

  test-runner:
    image: imega/jq
    container_name: test-runner
    depends_on:
      central-api:
        condition: service_healthy
      example-sort-app:
        condition: service_healthy
    networks:
      - ab_net_test
    volumes:
      - ./test.sh:/test.sh
    entrypoint: ["/bin/sh", "/test.sh"]

volumes:
  postgres_test_data:
  kafka_test_data:
  minio_test_data:

networks:
  ab_net_test:
    driver: bridge