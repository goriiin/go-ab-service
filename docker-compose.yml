services:
  # 1. PostgreSQL: Наш "источник истины"
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=ab_platform
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ab_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ab_net

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CREATE_TOPICS=ab_deltas:1:1,ab_snapshots_meta:1:1,ab_assignment_events:1:1
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - ab_net

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ab_net

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb local/ab-snapshots --ignore-existing;
      /usr/bin/mc policy set public local/ab-snapshots;
      echo 'MinIO bucket <ab-snapshots> is ready.';
      "
    networks:
      - ab_net

  central-api:
    build:
      context: .
      dockerfile: cmd/central-api/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ab_net

  outbox-worker:
    build:
      context: .
      dockerfile: cmd/outbox-worker/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - ab_net

  snapshot-generator:
    build:
      context: .
      dockerfile: cmd/snapshot-generator/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ab_net

  example-sort-app:
    build:
      context: .
      dockerfile: ./cmd/example-sort-app/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      - central-api
    networks:
      - ab_net

volumes:
  postgres_data:
  kafka_data:
  minio_data:

networks:
  ab_net:
    driver: bridge